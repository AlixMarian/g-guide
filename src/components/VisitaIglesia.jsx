import '../websiteUser.css';
import { useNavigate } from 'react-router-dom';
import React, { useState, useEffect, useRef } from 'react';
import { GoogleMap, LoadScript, DirectionsRenderer, Marker } from '@react-google-maps/api';
import { Offcanvas, Button, Form } from 'react-bootstrap';
import { fetchChurchData } from './mapfiles/churchDataUtils';
import loadingGif from '../assets/Ripple@1x-1.0s-200px-200px.gif';
import { handleMarkerClick, handleMapLoad, onZoomChanged } from './mapfiles/churchDataUtils';
import AutocompleteSearch from '@components/mapfiles/AutocompleteSearch';
import AutoGen from './mapfiles/AutoGen';
 
const containerStyle = {
  width: '100%',
  height: '700px',
}; 

const libraries = ['places', 'geometry'];


const colors = ["#FF0000", "#00FF00", "#0000FF", "#FF00FF", "#00FFFF", "#FFA500"];

const VisitaIglesia = () => {
  const navigate = useNavigate();
  const [churches, setChurches] = useState([]);
  const [directionsResponse, setDirectionsResponse] = useState([]);
  const [travelMode, setTravelMode] = useState('DRIVING');
  const [map, setMap] = useState(null);
  const [loading, setLoading] = useState(true);
  const [usingCurrentLocation, setUsingCurrentLocation] = useState(true);
  const [currentPosition, setCurrentPosition] = useState(null);
  const [startLocation, setStartLocation] = useState(null);
  const [customIcon, setCustomIcon] = useState(null);
  const [showOffcanvas, setShowOffcanvas] = useState(false);
  const [showAutoGen, setShowAutoGen] = useState(false);
  const handleToggleOffcanvas = () => setShowOffcanvas(!showOffcanvas);
  const [mapLoaded, setMapLoaded] = useState(false);
  const [mapKey, setMapKey] = useState(0);
  const [endLocation, setEndLocation] = useState(null); 
  const [sortedChurches, setSortedChurches] = useState([]);

  const [destinations, setDestinations] = useState([
    {
      id: 'dest-0',
      destination: null,
      usingCustomDestination: false,
      inputValue: '',
      selectedChurchId: '',
    },
  ]);

  const handleAutoGeneratedRoute = async (startLocation, sortedChurches, endLocation) => {
    if (!startLocation || !endLocation || sortedChurches.length === 0 || !window.google) {
      alert("Please provide valid start, end locations, and churches.");
      return;
    }
  
    try {
      const directionsService = new window.google.maps.DirectionsService();

      const waypoints = sortedChurches.map((church) => ({
        location: {
          lat: parseFloat(church.latitude),
          lng: parseFloat(church.longitude),
        },
        stopover: true,
      }));
  
      const result = await new Promise((resolve, reject) => {
        directionsService.route(
          {
            origin: startLocation,
            destination: endLocation,
            waypoints,
            optimizeWaypoints: true,
            travelMode: window.google.maps.TravelMode.DRIVING,
          },
          (response, status) => {
            if (status === window.google.maps.DirectionsStatus.OK) {
              resolve(response);
            } else {
              reject(`Error fetching directions: ${status}`);
            }
          }
        );
      });
  
      const directionsWithColors = result.routes[0].legs.map((leg, index) => ({
        directions: result,
        leg,
        color: colors[index % colors.length],
      }));
  
      setDirectionsResponse(directionsWithColors);
      setShowAutoGen(false);
      setShowOffcanvas(false);
  
      console.log("Route generated successfully:", directionsWithColors);
    } catch (error) {
      console.error("Failed to generate route:", error);
      alert("Failed to generate route. Please try again.");
    }
  };
  
  const destinationRefs = useRef([React.createRef()]);
  const portal = useRef(document.createElement('div'));

  useEffect(() => {
    const offcanvasBody = document.querySelector('.offcanvas-body');
    if (offcanvasBody) {
      offcanvasBody.appendChild(portal.current);
    }
    return () => {
      if (offcanvasBody && portal.current.parentNode === offcanvasBody) {
        offcanvasBody.removeChild(portal.current);
      }
    };
  }, []);

  useEffect(() => {
    const loadGoogleMapsScript = () => {
      if (window.google && window.google.maps) {
        setMapLoaded(true);
        setLoading(false);
        return;
      }

      const script = document.createElement('script');
      script.src = `https://maps.googleapis.com/maps/api/js?key=${import.meta.env.VITE_GOOGLE_MAPS_API_KEY}&libraries={libraries}`;
      script.async = true;
      script.defer = true;

      script.onload = () => {
        console.log('Google Maps script loaded successfully');
        setMapLoaded(true);
        setLoading(false);
      };

      script.onerror = (error) => {
        console.error('Error loading Google Maps script:', error);
        setLoading(false);
      };

      document.head.appendChild(script);
    };

  loadGoogleMapsScript();
  },
)

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      const data = await fetchChurchData();
      setChurches(data);
      setLoading(false);
    };

    fetchData();
  }, []);

  useEffect(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setCurrentPosition({
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          });
        },
        (error) => console.error('Error getting current position:', error)
      );
    }
  }, []);

  const addDestination = () => {
    const newDestination = {
      id: `dest-${Date.now()}`,
      destination: null,
      usingCustomDestination: false,
      inputValue: '',
      selectedChurchId: '',
    };
    setDestinations([...destinations, newDestination]);
    destinationRefs.current.push(React.createRef());
  };

  const uniqueDestinations = destinations
    .map((d) => d.destination)
    .filter(
      (dest, index, self) =>
        dest &&
        self.findIndex(
          (d) => d.lat === dest.lat && d.lng === dest.lng
        ) === index
    );

  const handleCalculateRoute = async () => {
    const origin = usingCurrentLocation ? currentPosition : startLocation;
    if (!origin) {
      alert('Please select a start location.');
      return;
    }
  
    if (uniqueDestinations.length === 0) {
      alert('Please select or enter valid destinations.');
      return;
    }
    setDirectionsResponse([]);
  
    const allLocations = [origin, ...uniqueDestinations];
    const newDirections = [];
  
    for (let i = 0; i < allLocations.length - 1; i++) {
      const directionsService = new window.google.maps.DirectionsService();
      const currentOrigin = allLocations[i];
      const currentDestination = allLocations[i + 1];
  
      const routeSegment = await new Promise((resolve, reject) => {
        directionsService.route(
          {
            origin: currentOrigin,
            destination: currentDestination,
            travelMode: window.google.maps.TravelMode[travelMode],
          },
          (result, status) => {
            if (status === window.google.maps.DirectionsStatus.OK) {
              resolve({
                result,
                color: colors[i % colors.length],
              });
            } else {
              reject(`Error fetching directions for segment ${i + 1}: ${status}`);
            }
          }
        );
      });
  
      newDirections.push(routeSegment);
    }

    setDirectionsResponse(newDirections);
  };

  const resetRoutes = () => {
    setMapKey((prevKey) => prevKey + 1);
  
    setDirectionsResponse([]);
    setDestinations([
      {
        id: 'dest-0',
        destination: null,
        usingCustomDestination: false,
        inputValue: '',
        selectedChurchId: '',
      },
    ]);
    setStartLocation(null);
    setUsingCurrentLocation(true);
  
    console.log('Routes and destinations reset.');
  };
  

  return loading ? (
    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>
      <img src={loadingGif} alt="Loading Google Maps..." style={{ width: '100px', justifyContent: 'center' }} />
    </div>
  ) : !mapLoaded ? (
    <div style={{ textAlign: 'center', marginTop: '20vh' }}>
      <p>Unable to load Google Maps. Please check your API key or network connection.</p>
    </div> 
  ) : (
    <LoadScript googleMapsApiKey={import.meta.env.VITE_GOOGLE_MAPS_API_KEY} libraries={libraries} onLoad={() => {console.log('Google Maps API loaded'); setMapLoaded(true); setLoading(false); }} onError={(error) => {console.error('Google Maps API loading error:', error); setLoading(false);}}> 
      <Button
        variant="primary"
        style={{ zIndex: '999', position: 'absolute', top: '10px', left: '190px' }}
        onClick={() => setShowOffcanvas(true)}
      >
        Open Directions
      </Button>
      <Button
        variant="primary"
        style={{ zIndex: '999', position: 'absolute', top: '10px', right: '60px' }}
        onClick={() => navigate('/map')}
      >
        <i className="bi bi-arrow-return-left"></i>
      </Button> 
      <Offcanvas
      show={showOffcanvas}
      style={{ zIndex: '9999' }}
      onHide={handleToggleOffcanvas} 
      placement="start"
    >
      <Offcanvas.Header closeButton>
        <Offcanvas.Title>Visita Iglesia</Offcanvas.Title>
        {!showAutoGen && (
          <Button
            variant="primary"
            onClick={() => {setShowAutoGen(true); resetRoutes(); }}
            style={{ marginLeft: 'auto' }}
          >
            Auto Generate
          </Button>
        )}
      </Offcanvas.Header>
      <Offcanvas.Body>
        {showAutoGen ? (
          <AutoGen
          onBack={() => setShowAutoGen(false)}
          resetRoutes={resetRoutes}
          churches={churches}
          currentPosition={currentPosition}
          handleAutoGeneratedRoute={handleAutoGeneratedRoute}
        />
        ) : ( 
          <Form>
            <Form.Group controlId="use-current-location" style={{ marginBottom: '1rem' }}>
              <Form.Check
                type="checkbox"
                label="Use Current Location"
                checked={usingCurrentLocation}
                onChange={() => setUsingCurrentLocation(!usingCurrentLocation)}
              />
            </Form.Group>
            {!usingCurrentLocation && (
              <Form.Group controlId="start-location" style={{ marginBottom: '1rem' }}>
                <Form.Label>Start Location</Form.Label>
                <AutocompleteSearch
                  onPlaceSelected={(location) => {
                    setStartLocation(location);
                    setUsingCurrentLocation(false);
                  }}
                />
              </Form.Group>
            )}
            {destinations.map((dest, index) => (
              <div
                key={dest.id}
                className="destination-item"
                style={{
                  display: 'flex',
                  alignItems: 'center',
                  marginBottom: '1rem',
                  position: 'relative',
                }}
              >
                <Form.Check
                  type="checkbox"
                  checked={dest.usingCustomDestination}
                  onChange={() => {
                    const newDestinations = [...destinations];
                    newDestinations[index].usingCustomDestination = !newDestinations[index]
                      .usingCustomDestination;
                    newDestinations[index].inputValue = '';
                    newDestinations[index].selectedChurchId = '';
                    newDestinations[index].destination = null;
                    setDestinations(newDestinations);
                  }}
                  style={{ marginRight: '1rem' }}
                /> 
                {dest.usingCustomDestination ? (
                  <AutocompleteSearch
                    onPlaceSelected={(location) => {
                      const updatedDestinations = [...destinations];
                      updatedDestinations[index].destination = location;
                      setDestinations(updatedDestinations);
                    }}
                  />
                ) : (
                  <Form.Group controlId={`select-destination-${index}`} style={{ flex: 1 }}>
                    <Form.Control
                      as="select"
                      value={dest.selectedChurchId}
                      onChange={(e) => {
                        const selectedChurch = churches.find(
                          (church) => church.id === e.target.value
                        );
                        const updatedDestinations = [...destinations];
                        updatedDestinations[index].selectedChurchId = e.target.value;
                        updatedDestinations[index].destination = selectedChurch
                          ? {
                              lat: parseFloat(selectedChurch.latitude),
                              lng: parseFloat(selectedChurch.longitude),
                            }
                          : null;
                        setDestinations(updatedDestinations);
                      }}
                    >
                      <option value="">Select Church</option>
                      {churches.map((church) => (
                        <option key={church.id} value={church.id}>
                          {church.churchName}
                        </option>
                      ))}
                    </Form.Control>
                  </Form.Group>
                )}
                <Button
                  variant="link"
                  className="delete-div-btn"
                  onClick={() => {
                    setDestinations((prevDestinations) =>
                      prevDestinations.filter((_, i) => i !== index)
                    );
                    handleCalculateRoute();
                  }}
                >
                  <i className="bi bi-x-circle-fill"></i>
                </Button>
              </div>
            ))}
            <Button variant="primary" onClick={addDestination} style={{ marginTop: '1rem' , justifyContent: 'center'}}>
              + Add another Church Destination
            </Button>
            <Button
              onClick={handleCalculateRoute}
              variant="primary"
              style={{ marginTop: '1rem', width: '100%' }}
            >
              Get Route
            </Button>
          </Form> 
        )}
      </Offcanvas.Body>
    </Offcanvas>

      <GoogleMap
        key={mapKey}
        mapContainerStyle={containerStyle}
        center={currentPosition || { lat: 0, lng: 0 }}
        zoom={13}
        onLoad={(mapInstance) => handleMapLoad(mapInstance, setMap, setCustomIcon, setLoading)}
      >
        {/* Render the directions if available */}
        {directionsResponse?.map((segment, index) => (
        <DirectionsRenderer
          key={index}
          options={{
            directions: segment.result,
            polylineOptions: {
              strokeColor: segment.color,
              strokeOpacity: 0.8,
              strokeWeight: 5,
            },
            suppressMarkers: true,
          }}
        />
      ))}

        {/* Render the current position/start location marker unconditionally */}
        {currentPosition && (
          <Marker
            position={currentPosition}
            label={{
              text: "A", 
              color: "black",
              fontWeight: "bold",
              fontSize: "16px",
            }}
            icon={{
              url: customIcon, 
              scaledSize: new window.google.maps.Size(30, 30), 
            }}
          />
        )}

        {/* Render the markers for destinations, starting from label 'B' */}
        {!loading &&
          uniqueDestinations.map((dest, index) => (
            <Marker
              key={`${dest.lat}-${dest.lng}`}
              position={dest}
              label={{
                text: String.fromCharCode('B'.charCodeAt(0) + index), 
                color: "black", 
                fontWeight: "bold",
                fontSize: "16px",
              }}
              icon={{
                url: customIcon, 
                scaledSize: new window.google.maps.Size(30, 30), 
              }}
              onClick={() => handleMarkerClick(dest)}
            />
          ))}

        {/* Start Location Marker */}
        {startLocation && (
          <Marker
            position={startLocation}
            label={{
              text: "Start Location",
              color: "black",
              fontWeight: "bold",
            }}
          />
        )}

        {/* End Location Marker */}
        {endLocation && (
          <Marker
            position={endLocation}
            label={{
              text: "End Location",
              color: "black",
              fontWeight: "bold",
            }}
          />
        )}

        {/* Render the directions for the top 5 nearest churches */}
        {sortedChurches.map((church, index) => {
          const nextChurch = sortedChurches[index + 1];
          if (nextChurch) { 
            const directionsService = new window.google.maps.DirectionsService();
            const request = {
              origin: { lat: parseFloat(church.latitude), lng: parseFloat(church.longitude) },
              destination: { lat: parseFloat(nextChurch.latitude), lng: parseFloat(nextChurch.longitude) },
              travelMode: window.google.maps.TravelMode.DRIVING,
            };

            directionsService.route(request, (result, status) => {
              if (status === window.google.maps.DirectionsStatus.OK) {
                setDirectionsResponse((prevResponses) => [
                  ...prevResponses,
                  {
                    result,
                    color: colors[index % colors.length],
                  },
                ]);
              } else {
                console.error(`Failed to fetch directions for segment ${index}:`, status);
              }
            });
          }

          // Render markers for each church
          return (
            <React.Fragment key={church.id}>
              <Marker
                position={{
                  lat: parseFloat(church.latitude),
                  lng: parseFloat(church.longitude),
                }}
                label={{
                  text: String.fromCharCode("B".charCodeAt(0) + index),
                  color: "black",
                  fontWeight: "bold",
                }}
              />
            </React.Fragment>
          );
      })}
      </GoogleMap>
    </LoadScript>
  );
};

export default VisitaIglesia;

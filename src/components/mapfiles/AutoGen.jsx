import { useState } from 'react';
import { Button, Form, Modal } from 'react-bootstrap';
import ChurchAutocomplete from './ChurchAutocomplete';
import PropTypes from 'prop-types';


const AutoGen = ({ onBack, churches, handleAutoGeneratedRoute, resetRoutes }) => {
  const [startLocation, setStartLocation] = useState(null);
  const [endLocation, setEndLocation] = useState(null);
  const [isGenerateClicked, setIsGenerateClicked] = useState(false);
  const [showInstructions, setShowInstructions] = useState(false);

  const handleGenerateRoute = () => {
    const origin = startLocation;

    if (!origin) {
      alert('Please select a start church.');
      return;
    }

    if (!endLocation) {
      alert('Please select an end location.');
      return;
    }

    if (handleAutoGeneratedRoute) {
      handleAutoGeneratedRoute(origin, churches, endLocation);
      setIsGenerateClicked(true); 
    }
  };

  const handleReset = () => {
    resetRoutes();
    setIsGenerateClicked(false);
    setStartLocation(null);
    setEndLocation(null);
  };

  return (
    <div className="position-fixed top-0 start-0 w-75 h-100 bg-white shadow-sm border-end d-flex flex-column p-3" style={{ maxWidth: "400px", zIndex: 1000, overflowY: "auto" }}>
      <div className="d-flex justify-content align-items-center mb-4">
        <Button variant="outline-secondary" onClick={onBack}><i className="bi bi-arrow-left"></i></Button>
        <h5 className="mb-0 fw-bold ms-2">Auto Generate Churches</h5>
      </div>

      <Form>
        <Form.Label>Select Start Church</Form.Label>
        <ChurchAutocomplete
          churches={churches}
          onChurchSelected={(selectedChurch) => {
            const lat = Number(selectedChurch.latitude);
            const lng = Number(selectedChurch.longitude);
            
            if (!isNaN(lat) && !isNaN(lng)) {
              setStartLocation({ lat, lng });
            } else {
              console.error('Invalid coordinates:', selectedChurch);
            }
          }}
          placeholder="Enter Location"
        />
        
        <Form.Label className='mt-3'>Select End Church</Form.Label>
        <ChurchAutocomplete churches={churches} onChurchSelected={(selectedChurch) => {
            console.log('Selected End Location:', selectedChurch);
            const lat = Number(selectedChurch.latitude);
            const lng = Number(selectedChurch.longitude);
            
            if (!isNaN(lat) && !isNaN(lng)) {
              setEndLocation({ lat, lng });
            } else {
              console.error('Invalid coordinates:', selectedChurch);
            }
          }}
          placeholder="Enter Location"/>

        <div className="d-flex align-items-center mt-3">
          <Button variant="primary" className="flex-grow-1 me-2" onClick={handleGenerateRoute} disabled={isGenerateClicked || !startLocation || !endLocation}>
            Generate Churches
          </Button>
          <Button variant="outline-danger" className="px-4" onClick={handleReset}>
            Reset
          </Button>
        </div>
        <div className="offcanvas-footer p-2 position-absolute bottom-0 start-0 w-100">
          <div className="d-flex align-items-start text-muted small ms-1">
            <i className="bi bi-info-circle me-1 text-danger" style={{fontSize: '20px', cursor: 'pointer'}} onClick={() => setShowInstructions(true)}></i>
            <span className='fst-italic' style={{fontSize: '12px', marginTop: '0.38rem'}}> How to use? </span>
          </div>
        </div>
      
        <Modal
          show={showInstructions}
          onHide={() => setShowInstructions(false)}
          container={document.querySelector('.offcanvas-body')}
          style={{ position: 'absolute', marginTop: '20.5rem', width: '20rem', marginLeft: '2rem'}}
        >
        <Modal.Header closeButton>
            <Modal.Title className="fs-6">How to Use Auto Generate?</Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <ol className="small mb-0 ps-3">
              <li>Select your starting church location</li>
              <li>Select your end church location</li> {/* eslint-disable-next-line react/no-unescaped-entities */}
              <li>Click "Generate Churches" to get suggested church stops</li> 
              <li>The system will suggest churches along your route</li> {/* eslint-disable-next-line react/no-unescaped-entities */}
              <li>Use "Reset" to start over</li>
            </ol>
          <div style={{marginTop: '1rem'}}>
          <div className="d-flex align-items-start text-muted small">
            
            <span className='text-justify fst-italic' style={{fontSize: '12px'}}><i className="bi bi-info-circle me-1 text-danger mt-3"></i>Please note that the generated churches are suggested options and may not reflect the exact route you choose to take. The decision is entirely yours.</span>
          </div>
          </div>
          </Modal.Body>
        </Modal>
      </Form>
    </div>
  );
};

AutoGen.propTypes = {
  onBack: PropTypes.func,
  churches: PropTypes.arrayOf(
    PropTypes.shape({
      id: PropTypes.string.isRequired,
      churchName: PropTypes.string.isRequired,
      latitude: PropTypes.string.isRequired,
      longitude: PropTypes.string.isRequired,
    })
  ),
  handleAutoGeneratedRoute: PropTypes.func,
  resetRoutes: PropTypes.func,
};

export default AutoGen;

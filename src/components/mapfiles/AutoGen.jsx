import { useState, useEffect, useCallback } from 'react';
import PropTypes from 'prop-types';
import { Button, Form } from 'react-bootstrap';
import AutocompleteSearch from '@components/mapfiles/AutocompleteSearch';

const AutoGen = ({ onBack, churches, currentPosition, handleAutoGeneratedRoute }) => {
  const [usingCurrentLocation, setUsingCurrentLocation] = useState(true);
  const [startLocation, setStartLocation] = useState(null);
  const [startChurchId, setStartChurchId] = useState('');
  const [endLocation, setEndLocation] = useState(null);
  const [usingCustomEndLocation, setUsingCustomEndLocation] = useState(false);
  const [endChurchId, setEndChurchId] = useState('');
  const [sortedChurches, setSortedChurches] = useState([]);

  // Sort and find the top 5 nearest churches
  const sortAndSetTopChurches = useCallback(
    (churchesList) => {
      const origin = usingCurrentLocation ? currentPosition : startLocation;

      if (origin && window.google) {
        const startLatLng = new window.google.maps.LatLng(origin.lat, origin.lng);

        const sortedChurches = churchesList
          .map((church) => {
            const latitude = parseFloat(church.latitude);
            const longitude = parseFloat(church.longitude);

            if (!isNaN(latitude) && !isNaN(longitude)) {
              const churchLatLng = new window.google.maps.LatLng(latitude, longitude);
              const distanceFromStart = window.google.maps.geometry.spherical.computeDistanceBetween(
                startLatLng,
                churchLatLng
              );

              return {
                ...church,
                distance: distanceFromStart / 1000, // Convert to kilometers
              };
            } else {
              console.warn(`Invalid latitude or longitude for church: ${church.churchName}`);
              return {
                ...church,
                distance: Infinity,
              };
            }
          })
          .filter((church) => church.distance !== Infinity)
          .sort((a, b) => a.distance - b.distance);

        console.log('Sorted Churches:', sortedChurches);

        setSortedChurches(sortedChurches.slice(0, 5));
      } else {
        console.error('Invalid origin or Google Maps API not available.');
      }
    },
    [currentPosition, usingCurrentLocation, startLocation]
  );

  useEffect(() => {
    if ((usingCurrentLocation || startLocation) && endLocation) {
      sortAndSetTopChurches(churches);
    }
  }, [usingCurrentLocation, startLocation, endLocation, churches, sortAndSetTopChurches]);

  const handleGenerateRoute = () => {
    const origin = usingCurrentLocation ? currentPosition : startLocation;
    if (!origin || !endLocation || sortedChurches.length === 0) {
      alert('Please select valid start and end locations.');
      return;
    }

    handleAutoGeneratedRoute(origin, sortedChurches, endLocation);
  };

  return (
    <div
      style={{
        position: 'fixed',
        top: 0,
        left: 0,
        width: '100%',
        maxWidth: '400px',
        height: '100%',
        backgroundColor: '#FFFFFF',
        zIndex: 1000,
        padding: '1rem',
        overflowY: 'auto',
        boxShadow: '0 0 15px rgba(0,0,0,0.2)',
        borderRight: '1px solid #e0e0e0',
      }}
    >
      <div className="d-flex justify-content-between align-items-center mb-4">
        <Button variant="outline-secondary" onClick={onBack}>
          <i className="bi bi-arrow-left me-2"></i> Back
        </Button>
        <h5 className="mb-0 fw-bold">Auto Generate Route</h5>
      </div>

      <Form>
        <Form.Group controlId="use-current-location" className="mb-3">
          <Form.Check
            type="checkbox"
            label="Use Current Location"
            checked={usingCurrentLocation}
            onChange={() => {
              setUsingCurrentLocation(!usingCurrentLocation);
              setStartChurchId('');
              setStartLocation(null);
            }}
          />
        </Form.Group>

        {!usingCurrentLocation && (
          <Form.Group controlId="start-location" className="mb-3">
            <Form.Label>Select Start Church</Form.Label>
            <Form.Control
              as="select"
              value={startChurchId}
              onChange={(e) => {
                setStartChurchId(e.target.value);
                const selectedChurch = churches.find((church) => church.id === e.target.value);
                if (selectedChurch) {
                  setStartLocation({
                    lat: parseFloat(selectedChurch.latitude),
                    lng: parseFloat(selectedChurch.longitude),
                  });
                }
              }}
            >
              <option value="">Select Church</option>
              {churches?.map((church) => (
                <option key={church.id} value={church.id}>
                  {church.churchName}
                </option>
              ))}
            </Form.Control>
          </Form.Group>
        )}

        <Form.Group controlId="use-custom-end-location" className="mb-3">
          <Form.Check
            type="checkbox"
            label="Use Custom End Location"
            checked={usingCustomEndLocation}
            onChange={() => {
              setUsingCustomEndLocation(!usingCustomEndLocation);
              setEndChurchId('');
              setEndLocation(null);
            }}
          />
        </Form.Group>

        {!usingCustomEndLocation ? (
          <Form.Group controlId="end-location" className="mb-3">
            <Form.Label>Select End Church</Form.Label>
            <Form.Control
              as="select"
              value={endChurchId}
              onChange={(e) => {
                setEndChurchId(e.target.value);
                const selectedChurch = churches.find((church) => church.id === e.target.value);
                if (selectedChurch) {
                  setEndLocation({
                    lat: parseFloat(selectedChurch.latitude),
                    lng: parseFloat(selectedChurch.longitude),
                  });
                }
              }}
            >
              <option value="">Select Church</option>
              {churches.map((church) => (
                <option key={church.id} value={church.id}>
                  {church.churchName}
                </option>
              ))}
            </Form.Control>
          </Form.Group>
        ) : (
          <Form.Group controlId="end-location-custom" className="mb-3">
            <Form.Label>Enter End Location</Form.Label>
            <AutocompleteSearch
              onPlaceSelected={(location) => {
                setEndLocation(location);
              }}
              placeholder="Enter end location"
            />
          </Form.Group>
        )}

        <Button variant="primary" className="w-100 mt-3" onClick={handleGenerateRoute}>
          Generate Route
        </Button>

        {sortedChurches.length > 0 && (
          <div className="mt-4">
            <h5>Top 5 Nearest Churches:</h5>
            <ul>
              {sortedChurches.map((church) => (
                <li key={church.id}>
                  {church.churchName} - {church.distance.toFixed(2)} km
                </li>
              ))}
            </ul>
          </div>
        )}
      </Form>
    </div>
  );
};

AutoGen.propTypes = {
  onBack: PropTypes.func.isRequired,
  churches: PropTypes.arrayOf(
    PropTypes.shape({
      id: PropTypes.string.isRequired,
      churchName: PropTypes.string.isRequired,
      latitude: PropTypes.string.isRequired,
      longitude: PropTypes.string.isRequired,
    })
  ).isRequired,
  currentPosition: PropTypes.shape({
    lat: PropTypes.number,
    lng: PropTypes.number,
  }),
  handleAutoGeneratedRoute: PropTypes.func.isRequired,
};

AutoGen.defaultProps = {
  currentPosition: null,
};

export default AutoGen;

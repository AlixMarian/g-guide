import { useState } from 'react';
import { Button, Form, Modal } from 'react-bootstrap';
import ChurchAutocomplete from './ChurchAutocomplete';
import PropTypes from 'prop-types';


const AutoGen = ({ onBack, churches, handleAutoGeneratedRoute, resetRoutes }) => {
  const [startLocation, setStartLocation] = useState(null);
  const [endLocation, setEndLocation] = useState(null);
  const [isGenerateClicked, setIsGenerateClicked] = useState(false);
  const [showInstructions, setShowInstructions] = useState(false);


  const [startCityChurches, setStartCityChurches] = useState([]);
  const [endCityChurches, setEndCityChurches] = useState([]);
  const [selectedStartChurch, setSelectedStartChurch] = useState(null);
  const [selectedEndChurch, setSelectedEndChurch] = useState(null);


  const cities = [
    "Alcantara", "Alcoy", "Alegria", "Aloguinsan", "Argao", "Asturias", "Badian", "Bagay",
    "Balamban", "Barili", "Bato", "Bitoon", "Bogo City", "Boljoon", "Borbon", "Buanoy",
    "Bulak", "Calidngan", "Cantabaco", "Cantumog", "Carcar City", "Carmen", "Catmon",
    "Cebu City", "Colonia", "Compostela", "Consolacion", "Cotcot", "Daanbantayan",
    "Dalaguete", "Danao City", "Dicc", "Dumanjug", "Garing", "Giloctog", "Ginatilan",
    "Guba", "Ilihan", "Jaclopan", "Kawayan", "Kawit", "Lamac", "Lambusan", "Lapu-Lapu",
    "Lawaan", "Liloan", "Lipata", "Lugo", "Lutopan", "Magdugo", "Magsico", "Malabuyoc",
    "Mandaue", "Manghilao", "Manlapay", "Mantalongon", "Maslog", "Matabang", "Matutinao",
    "Maya", "Medellin", "Minglanilla", "Moalboal", "Naga", "Nueva Caceres", "Odlot",
    "Oslob", "Panalipan", "La Paz", "Pinamungahan", "Poog", "Pulangbato", "Putat", "Ronda",
    "Rosario", "San Fernando", "Santa Lucia", "San Remegio", "San Sebastian", "Samboan",
    "Sangi", "Santander", "Sibonga", "Simala", "Sogod", "Tabla", "Tabogon", "Tabuelan",
    "Talaga", "Talamban", "Talavera", "Talisay City", "Tapilon", "Taytay", "Tayud", "Tindog",
    "Toledo City", "Tuburan", "Yati"
  ];


  const handleStartCityChange = (e) => {
    const selectedCity = e.target.value;
    if (!selectedCity) {
      setStartCityChurches([]);
      setStartLocation(null);
      return;
    }
  
    const cityChurches = churches.filter((church) => {
      return church.churchLocation &&
             church.churchLocation.toLowerCase().split(',')[0].trim() === selectedCity.toLowerCase();
    });
  
    setStartCityChurches(cityChurches);
  
    if (cityChurches.length > 0) {
      // Randomly select one church from the cityChurches array
      const randomChurch = cityChurches[Math.floor(Math.random() * cityChurches.length)];
      setSelectedStartChurch(randomChurch);
      setStartLocation({
        lat: Number(randomChurch.latitude),
        lng: Number(randomChurch.longitude)
      });
    }
  };
  
  const handleEndCityChange = (e) => {
    const selectedCity = e.target.value;
    if (!selectedCity) {
      setEndCityChurches([]);
      setEndLocation(null);
      return;
    }
  

    const cityChurches = churches.filter((church) => {
      return church.churchLocation &&
             church.churchLocation.toLowerCase().split(',')[0].trim() === selectedCity.toLowerCase();
    });
  
    setEndCityChurches(cityChurches);
  
    if (cityChurches.length > 0) {
      // Randomly select one church from the cityChurches array
      const randomChurch = cityChurches[Math.floor(Math.random() * cityChurches.length)];
      setSelectedEndChurch(randomChurch);
      setEndLocation({
        lat: Number(randomChurch.latitude),
        lng: Number(randomChurch.longitude)
      });
    }
  };
  
  const handleGenerateCityRoute = () => {

    const origin = {
      lat: Number(selectedStartChurch.latitude),
      lng: Number(selectedStartChurch.longitude)
    };
   
    const destination = {
      lat: Number(selectedEndChurch.latitude),
      lng: Number(selectedEndChurch.longitude)
    };


    handleAutoGeneratedRoute(origin, churches, destination);
    setIsGenerateClicked(true);
  };


  const handleGenerateRoute = () => {
    const origin = startLocation;

    if (!origin) {
      alert('Please select a start church.');
      return;
    }

    if (!endLocation) {
      alert('Please select an end location.');
      return;
    }

    if (handleAutoGeneratedRoute) {
      handleAutoGeneratedRoute(origin, churches, endLocation);
      setIsGenerateClicked(true);
    }
  };

  const handleReset = () => {
    resetRoutes();
    setIsGenerateClicked(false);
    setStartLocation(null);
    setEndLocation(null);
  };

  return (
    <div className="position-fixed top-0 start-0 w-75 h-100 bg-white shadow-sm border-end d-flex flex-column p-3" style={{ maxWidth: "400px", zIndex: 1000, overflowY: "auto" }}>
      <div className="d-flex justify-content align-items-center mb-4">
        <Button variant="outline-secondary" onClick={onBack}><i className="bi bi-arrow-left"></i></Button>
        <h5 className="mb-0 fw-bold ms-2">Auto Generate Churches</h5>
      </div>

      <Form>
        <Form.Label>Select Start Church</Form.Label>
        <ChurchAutocomplete
          churches={churches}
          onChurchSelected={(selectedChurch) => {
            const lat = Number(selectedChurch.latitude);
            const lng = Number(selectedChurch.longitude);
           
            if (!isNaN(lat) && !isNaN(lng)) {
              setStartLocation({ lat, lng });
            } else {
              console.error('Invalid coordinates:', selectedChurch);
            }
          }}
          placeholder="Enter Location"
        />
       
        <Form.Label className='mt-3'>Select End Church</Form.Label>
        <ChurchAutocomplete churches={churches} onChurchSelected={(selectedChurch) => {
            console.log('Selected End Location:', selectedChurch);
            const lat = Number(selectedChurch.latitude);
            const lng = Number(selectedChurch.longitude);
           
            if (!isNaN(lat) && !isNaN(lng)) {
              setEndLocation({ lat, lng });
            } else {
              console.error('Invalid coordinates:', selectedChurch);
            }
          }}
          placeholder="Enter Location"/>

        <div className="d-flex align-items-center mt-3">
          <Button variant="primary" className="flex-grow-1 me-2" onClick={handleGenerateRoute} disabled={isGenerateClicked || !startLocation || !endLocation}>
            Generate Churches
          </Button>
          <Button variant="outline-danger" className="px-4" onClick={handleReset}>
            Reset
          </Button>
        </div>
        <div className='text-center'>
            <p style={{marginTop: '1rem', marginBottom: '-0.01rem'}}>or</p>
          </div>

        <h5 className="mb-0 fw-bold ms-2">Auto Generate Churches by City</h5>
        <br/>
        <Form.Label>Select Start City</Form.Label>
        <Form.Select
          onChange={handleStartCityChange}
          className="mb-3"
        >
          <option value="">Select a city...</option>
          {cities.map((city) => (
            <option key={city} value={city}>
              {city}
            </option>
          ))}
        </Form.Select>


    <Form.Label className=''>Select End City</Form.Label>
    <Form.Select
      onChange={handleEndCityChange}  // Add this handler
      className="mb-3"
    >
      <option value="">Select a city...</option>
      {cities.map((city) => (
        <option key={city} value={city}>
          {city}
        </option>
      ))}
    </Form.Select>

    <div className="d-flex align-items-center mt-3">
      <Button
        variant="primary"
        className="flex-grow-1 me-2"
        onClick={handleGenerateCityRoute}
        // disabled={!selectedStartChurch || !selectedEndChurch}
      >
        Generate Churches
      </Button>
      <Button variant="outline-danger" className="px-4" onClick={handleReset}>
        Reset
      </Button>
    </div>


        <div className="offcanvas-footer p-2 position-absolute bottom-0 start-0 w-100">
          <div className="d-flex align-items-start text-muted small ms-1">
            <i className="bi bi-info-circle me-1 text-danger" style={{fontSize: '20px', cursor: 'pointer'}} onClick={() => setShowInstructions(true)}></i>
            <span className='fst-italic' style={{fontSize: '12px', marginTop: '0.38rem'}}> How to use? </span>
          </div>
        </div>
     
        <Modal
          show={showInstructions}
          onHide={() => setShowInstructions(false)}
          centered
          container={document.querySelector('.offcanvas-body')}
        >

        <Modal.Header closeButton>
            <Modal.Title className="fs-6">How to Use Auto Generate?</Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <ol className="small mb-0 ps-3">
              <li>Select your starting church location</li>
              <li>Select your end church location</li> {/* eslint-disable-next-line react/no-unescaped-entities */}
              <li>Click "Generate Churches" to get suggested church stops</li>
              <li>The system will suggest churches along your route</li> {/* eslint-disable-next-line react/no-unescaped-entities */}
              <li>Use "Reset" to start over</li>
            </ol>
          <div style={{marginTop: '1rem'}}>
          <div className="d-flex align-items-start text-muted small">
           
            <span className='text-justify fst-italic' style={{fontSize: '12px'}}><i className="bi bi-info-circle me-1 text-danger mt-3"></i>Please note that the generated churches are suggested options and may not reflect the exact route you choose to take. The decision is entirely yours.</span>
          </div>
          </div>
          </Modal.Body>
        </Modal>
      </Form>
    </div>
  );
};




AutoGen.propTypes = {
  onBack: PropTypes.func,
  churches: PropTypes.arrayOf(
    PropTypes.shape({
      id: PropTypes.string.isRequired,
      churchName: PropTypes.string.isRequired,
      latitude: PropTypes.string.isRequired,
      longitude: PropTypes.string.isRequired,
    })
  ),
  handleAutoGeneratedRoute: PropTypes.func,
  resetRoutes: PropTypes.func,
};




export default AutoGen;










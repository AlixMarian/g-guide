// AutoGen.jsx
import { useState } from 'react';
import { Button, Form } from 'react-bootstrap';
import AutocompleteSearch from '@components/mapfiles/AutocompleteSearch';
import PropTypes from 'prop-types';

const AutoGen = ({ onBack, churches, handleAutoGeneratedRoute, resetRoutes }) => {
  const [startLocation, setStartLocation] = useState(null);
  const [startChurchId, setStartChurchId] = useState('');

  const [usingCustomEndLocation, setUsingCustomEndLocation] = useState(false);
  const [endLocation, setEndLocation] = useState(null);
  const [endChurchId, setEndChurchId] = useState('');

  const handleGenerateRoute = () => {
    const origin = startLocation;

    if (!origin) {
      alert('Please select a start church.');
      return;
    }

    if (!endLocation) {
      alert('Please select an end location.');
      return;
    }

    if (handleAutoGeneratedRoute) {
      handleAutoGeneratedRoute(origin, churches, endLocation);
    }
  };

  return (
    <div
      style={{
        position: 'fixed',
        top: 0,
        left: 0,
        width: '100%',
        maxWidth: '400px',
        height: '100%',
        backgroundColor: '#FFFFFF',
        zIndex: 1000,
        padding: '1rem',
        overflowY: 'auto',
        boxShadow: '0 0 15px rgba(0,0,0,0.2)',
        borderRight: '1px solid #e0e0e0',
      }}
    >
      <div className="d-flex justify-content-between align-items-center mb-4">
        <Button variant="outline-secondary" onClick={onBack}>
          <i className="bi bi-arrow-left me-2"></i> Back
        </Button>
        <h5 className="mb-0 fw-bold">Auto Generate Route</h5>
      </div>

      <Form>
        {/* Start Location Section */}
        <Form.Group controlId="start-church" className="mb-3">
          <Form.Label>Select Start Church</Form.Label>
          <Form.Control
            as="select"
            value={startChurchId}
            onChange={(e) => {
              const selectedChurchId = e.target.value;
              setStartChurchId(selectedChurchId);
              const selectedChurch = churches.find((church) => church.id === selectedChurchId);
              if (selectedChurch) {
                setStartLocation({
                  lat: parseFloat(selectedChurch.latitude),
                  lng: parseFloat(selectedChurch.longitude),
                });
              }
            }}
          >
            <option value="">Select Church</option>
            {churches.map((church) => (
              <option key={church.id} value={church.id}>
                {church.churchName}
              </option>
            ))}
          </Form.Control>
        </Form.Group>

        {/* End Location Section */}
        <Form.Group controlId="use-custom-end-location" className="mb-3">
          <Form.Check
            type="checkbox"
            label="Use Custom End Location"
            checked={usingCustomEndLocation}
            onChange={() => {
              setUsingCustomEndLocation(!usingCustomEndLocation);
              setEndChurchId('');
              setEndLocation(null);
            }}
          />
        </Form.Group>

        {!usingCustomEndLocation ? (
          <Form.Group controlId="end-church" className="mb-3">
            <Form.Label>Select End Church</Form.Label>
            <Form.Control
              as="select"
              value={endChurchId}
              onChange={(e) => {
                const selectedChurchId = e.target.value;
                setEndChurchId(selectedChurchId);
                const selectedChurch = churches.find((church) => church.id === selectedChurchId);
                if (selectedChurch) {
                  setEndLocation({
                    lat: parseFloat(selectedChurch.latitude),
                    lng: parseFloat(selectedChurch.longitude),
                  });
                }
              }}
            >
              <option value="">Select Church</option>
              {churches.map((church) => (
                <option key={church.id} value={church.id}>
                  {church.churchName}
                </option>
              ))}
            </Form.Control>
          </Form.Group>
        ) : (
          <Form.Group controlId="end-location-custom" className="mb-3">
            <Form.Label>Enter End Location</Form.Label>
            <AutocompleteSearch
              onPlaceSelected={(location) => {
                console.log('Selected end location:', location);
                setEndLocation(location);
              }}
              placeholder="Enter end location"
            />
          </Form.Group>
        )}

        <div className="d-flex align-items-center">
          <Button variant="primary" className="flex-grow-1 me-2" onClick={handleGenerateRoute}>
            Generate Route
          </Button>
          <Button variant="outline-danger" className="px-4" onClick={resetRoutes}>
            Reset
          </Button>
        </div>
      </Form>
    </div>
  );
};

AutoGen.propTypes = {
  onBack: PropTypes.func.isRequired,
  churches: PropTypes.arrayOf(
    PropTypes.shape({
      id: PropTypes.string.isRequired,
      churchName: PropTypes.string.isRequired,
      latitude: PropTypes.string.isRequired,
      longitude: PropTypes.string.isRequired,
    })
  ).isRequired,
  handleAutoGeneratedRoute: PropTypes.func.isRequired,
  resetRoutes: PropTypes.func.isRequired,
};

export default AutoGen;

// AutoGen.jsx
import { useState } from 'react';
import { Button, Form, Modal } from 'react-bootstrap';
import ChurchAutocomplete from './ChurchAutocomplete'; // Adjust the path as needed
import PropTypes from 'prop-types';
import visLogo from '/src/assets/visLogo.png';


const AutoGen = ({ onBack, churches, handleAutoGeneratedRoute, resetRoutes }) => {
  const [startLocation, setStartLocation] = useState(null);
  const [startChurchId, setStartChurchId] = useState('');

  const [usingCustomEndLocation, setUsingCustomEndLocation] = useState(false);
  const [endLocation, setEndLocation] = useState(null);
  const [endChurchId, setEndChurchId] = useState('');
  const [isGenerateClicked, setIsGenerateClicked] = useState(false);
  const [showInstructions, setShowInstructions] = useState(false); // Add this state


  const sortedChurchOptions = [...churches].sort((a, b) => 
    a.churchName.localeCompare(b.churchName)
  );

  const handleGenerateRoute = () => {
    const origin = startLocation;

    if (!origin) {
      alert('Please select a start church.');
      return;
    }

    if (!endLocation) {
      alert('Please select an end location.');
      return;
    }

    if (handleAutoGeneratedRoute) {
      handleAutoGeneratedRoute(origin, churches, endLocation);
      setIsGenerateClicked(true); // Disable button after generating route
    }
  };

  const handleReset = () => {
    resetRoutes();
    setIsGenerateClicked(false); // Re-enable generate button after reset
    setStartLocation(null);
    setEndLocation(null);
    setStartChurchId('');
    setEndChurchId('');
  };

  return (
    <div
      style={{
        position: 'fixed',
        top: 0,
        left: 0,
        width: '100%',
        maxWidth: '400px',
        height: '100%',
        backgroundColor: '#FFFFFF',
        zIndex: 1000,
        padding: '1rem',
        overflowY: 'auto',
        boxShadow: '0 0 15px rgba(0,0,0,0.2)',
        borderRight: '1px solid #e0e0e0',
        display: 'flex',  // Add this
        flexDirection: 'column', 
      }}
    >
      <div className="d-flex justify-content align-items-center mb-4">
        <Button variant="outline-secondary" onClick={onBack}><i className="bi bi-arrow-left"></i></Button>
        <h5 className="mb-0 fw-bold ms-2">Auto Generate Churches</h5>
      </div>

      <Form>
        <Form.Label>Select Start Church</Form.Label>
        <ChurchAutocomplete
          churches={churches}
          onChurchSelected={(selectedChurch) => {
            // Ensure numeric conversion of coordinates
            const lat = Number(selectedChurch.latitude);
            const lng = Number(selectedChurch.longitude);
            
            // Validate coordinates
            if (!isNaN(lat) && !isNaN(lng)) {
              setStartChurchId(selectedChurch.id);
              setStartLocation({ lat, lng });
            } else {
              console.error('Invalid coordinates:', selectedChurch);
            }
          }}
          placeholder="Enter Location"
        />
        
        <Form.Label className='mt-3'>Select End Church</Form.Label>
        <ChurchAutocomplete
          churches={churches}
          onChurchSelected={(selectedChurch) => {
            console.log('Selected End Location:', selectedChurch);
            const lat = Number(selectedChurch.latitude);
            const lng = Number(selectedChurch.longitude);
            
            // Validate coordinates
            if (!isNaN(lat) && !isNaN(lng)) {
              setEndChurchId(selectedChurch.id);
              setEndLocation({ lat, lng });
            } else {
              console.error('Invalid coordinates:', selectedChurch);
            }
          }}
          placeholder="Enter Location"
        />


        <div className="d-flex align-items-center mt-3">
          <Button variant="primary" className="flex-grow-1 me-2" onClick={handleGenerateRoute} disabled={isGenerateClicked || !startLocation || !endLocation}>
            Generate Churches
          </Button>
          <Button variant="outline-danger" className="px-4" onClick={handleReset}>
            Reset
          </Button>
        </div>
        
        <div className="d-flex align-items-start small ms-1" style={{marginTop: '-1rem'}}>
          <i 
            className="bi bi-info-circle me-1 text-danger" 
            style={{fontSize: '20px', cursor: 'pointer', marginTop: '24rem'}}
            onClick={() => setShowInstructions(true)}
          ></i>
          <span className='fst-italic' style={{fontSize: '12px', marginTop: '24.38rem'}}>
            How to use?
          </span>
        </div>
        <Modal
          show={showInstructions}
          onHide={() => setShowInstructions(false)}
          container={document.querySelector('.offcanvas-body')}
          style={{ position: 'absolute', marginTop: '20.5rem', width: '20rem', marginLeft: '2rem'}}
        >
        <Modal.Header closeButton>
            <Modal.Title className="fs-6">How to Use Auto Generate?</Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <ol className="small mb-0 ps-3">
              <li>Select your starting church location</li>
              <li>Select your end church location</li>
              <li>Click "Generate Churches" to get suggested church stops</li>
              <li>The system will suggest churches along your route</li>
              <li>Use "Reset" to start over</li>
            </ol>
          <div style={{marginTop: '1rem'}}>
          <div className="d-flex align-items-start text-muted small">
            <i className="bi bi-info-circle me-1 text-danger mt-3"></i>
            <span className='text-justify fst-italic' style={{fontSize: '12px'}}>Please note that the generated churches are suggested options and may not reflect the exact route you choose to take. The decision is entirely yours.</span>
          </div>
          </div>
          </Modal.Body>
        </Modal>
      </Form>
    </div>
  );
};

AutoGen.propTypes = {
  onBack: PropTypes.func.isRequired,
  churches: PropTypes.arrayOf(
    PropTypes.shape({
      id: PropTypes.string.isRequired,
      churchName: PropTypes.string.isRequired,
      latitude: PropTypes.string.isRequired,
      longitude: PropTypes.string.isRequired,
    })
  ).isRequired,
  handleAutoGeneratedRoute: PropTypes.func.isRequired,
  resetRoutes: PropTypes.func.isRequired,
};

export default AutoGen;
